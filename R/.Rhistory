var( rweib( 100000, shape = 1.733, scale = 6 ) )
var( rweibull( 100000, shape = 1.733, scale = 6 ) )
var( rweibull( 100000, shape = 1.733, scale = 6 ) )
var( rweibull( 1000000, shape = 1.733, scale = 6 ) )
var( rweibull( 1000000, shape = 1.733, scale = 6 ) )
var( rweibull( 1000000, shape = 1.733, scale = 6 ) )
var( rweibull( 10000000, shape = 1.733, scale = 6 ) )
var( rweibull( 10000000, shape = 1.733, scale = 6 ) )
sqrt( var( rweibull( 10000000, shape = 1.733, scale = 6 ) ) )
36/25
sqrt( var( rweibull( 10000000, shape = 1.733, scale = 5 ) ) )
mean( rweibull( 10000000, shape = 1.733, scale = 5 ) )
mean( rweibull( 10000000, shape = 1.733, scale = 6 ) )
dev.off();dev.off();dev.off();dev.off();dev.off();dev.off();
biomarker_dynamics
ihist
biomarker_dynamics
ihist
ihist
biomarker_dynamics
biomarker_dynamics
biomarker_dynamics
ihist
all_assay_dynamics[[ "architect_weib3_delaney" ]]
q()
n
ihist
range_start
range_end
aggregate_interpreter_constructor_fn.new(ihist)
prior.lower.bound = -Inf; prior.upper.bound = Inf; lower.bound.offset.from.first.positive = -100; minimum.bound.width = 150; be.verbose = FALSE
ihist.most.informative.by.biomarker
prior.lower.bound
prior.upper.bound
create.normalized.posterior.density.of.infection.causing.exposure.time( ihist.most.informative.by.biomarker, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, prior.over.last.biomarker.crossing.threshold.time = NULL, be.verbose = be.verbose )
remaining.biomarker.bounds.to.process.last.to.first = ihist.most.informative.by.biomarker; prior.over.last.biomarker.crossing.threshold.time = NULL
low.boundary
high.boundary
    posterior.for.preceding.event <-
        create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = the.biomarker, prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ) )
    posterior.for.preceding.event <-        create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = the.biomarker, prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ) )
posterior.for.preceding.event( 18000 )
    remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one
remaining.biomarker.bounds.to.process.last.to.first = remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one; prior.over.last.biomarker.crossing.threshold.time = posterior.for.preceding.event;
( prior.over.last.biomarker.crossing.threshold.time.is.uniform )
low.boundary
high.boundary
( length( remaining.biomarker.bounds.to.process.last.to.first ) == 1 )
.fn <- ( create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = "RNA", prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ) ) )
posterior.maximum = NULL; biomarker.dynamics.class = "RNA"; the.biomarker.dynamics = biomarker_dynamics[[ biomarker.dynamics.class ]]; prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time; sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] );
abs.tol = 0.0001; rel.tol = 0.0001; subdivisions = 100L
posterior.fn.creator.fn = create.unnormalized.density.of.time.of.preceding.event.from.time.of.biomarker.crossing.threshold.from.uncertainty.interval
add.numeric.stability.at.the.sacrifice.of.speed = TRUE; total.mass.rel.tol = 100*rel.tol
    .posterior.fn <-        posterior.fn.creator.fn( log.results = FALSE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound );
    .posterior.fn <-        posterior.fn.creator.fn( log.results = FALSE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, low.boundary = low.boundary, high.boundary = high.boundary );
.posterior.fn( 18000 )
.lower
prior.lower.bound
.upper
prior.upper.bound
    prior.lower.bound
prior.upper.bound
    prior.lower.bound <- .lower - 1;
    prior.upper.bound <- .upper + 1;


( add.numeric.stability.at.the.sacrifice.of.speed )
        .log.posterior.fn <-            posterior.fn.creator.fn( log.results = TRUE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound );
        .log.posterior.fn <-            posterior.fn.creator.fn( log.results = TRUE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, low.boundary = low.boundary, high.boundary = high.boundary );
.log.posterior.fn( 18000 )
        .scalar
.scaled.unlogged.posterior.fn( 18000 )
total.mass
sample.name
substr( sample.name, 1, 3 )
substr( sample.name, 1, 3 ) == "RNA" )
substr( sample.name, 1, 3 ) == "RNA"
.fn <- function( x ) { .scaled.unlogged.posterior.fn( x ) / total.mass }
.fn( 18000 )
create.normalized.posterior.density.of.infection.causing.exposure.time( ihist.most.informative.by.biomarker, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, prior.over.last.biomarker.crossing.threshold.time = NULL, be.verbose = be.verbose )
prior.lower.bound
prior.upper.bound
create.normalized.posterior.density.of.infection.causing.exposure.time( ihist.most.informative.by.biomarker, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, prior.over.last.biomarker.crossing.threshold.time = NULL, be.verbose = TRUE )
low.boundary - get.dynamics.maximum( the.biomarker.dynamics )
get.dynamics.maximum( the.biomarker.dynamics )
the.biomarker.dynamics
low.boundary - get.dynamics.minimum( the.biomarker.dynamics )
get.dynamics.minimum( the.biomarker.dynamics )
get.dynamics.maximum( the.biomarker.dynamics )
high.boundary
high.boundary - get.dynamics.minimum( the.biomarker.dynamics )
low.boundary - get.dynamics.maximum( the.biomarker.dynamics )
prior.lower.bound
.fn <- create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = "RNA", prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] )
.fn( 18000 )
.fn <- create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = "RNA", prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ) )
low.boundary
high.boundary
prior.lower.bound
prior.upper.bound
.fn <- create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = "RNA", prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ), be.verbose = TRUE )
prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time
prior.over.biomarker.crossing.threshold.time( 18000 )
prior.over.biomarker.crossing.threshold.time( 17980 )
prior.over.biomarker.crossing.threshold.time( 17980:18020 )
prior.over.biomarker.crossing.threshold.time( 17980:18010 )
prior.over.biomarker.crossing.threshold.time( 17980:18005 )
posterior.maximum
        .log.posterior.fn <-            posterior.fn.creator.fn( log.results = TRUE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, low.boundary = low.boundary, high.boundary = high.boundary );
    .posterior.fn <-        posterior.fn.creator.fn( log.results = FALSE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, low.boundary = low.boundary, high.boundary = high.boundary );
.posterior.fn( 18000 )
log( .posterior.fn( 18000 ) )
.log.posterior.fn( 18000 )
.lower
.upper
prior.lower.bound
.posterior.fn( prior.lower.bound )
.lower
ensure.finite.and.nonzero.from.below( prior.lower.bound, .posterior.fn, be.verbose = be.verbose )
.posterior.fn( prior.lower.bound )
ensure.finite.and.nonzero.from.below( prior.lower.bound, .posterior.fn, be.verbose = TRUE )
ensure.finite.and.nonzero.from.below( prior.lower.bound + 1, .posterior.fn, be.verbose = TRUE )
.fn <- create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = "RNA", prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ), be.verbose = TRUE )
posterior.fn.creator.fn = create.unnormalized.density.of.time.of.preceding.event.from.time.of.biomarker.crossing.threshold.from.uncertainty.interval
    .posterior.fn <-        posterior.fn.creator.fn( log.results = FALSE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, low.boundary = low.boundary, high.boundary = high.boundary );
.posterior.fn( prior.lower.bound )
.posterior.fn( prior.lower.bound + 1 )
.posterior.fn( prior.lower.bound + 0.1 )
.posterior.fn( prior.upper.bound )
.posterior.fn( prior.upper.bound - 1)
.posterior.fn( prior.upper.bound - 10)
.posterior.fn( prior.upper.bound - 100)
.lower
.upper
prior.upper.bound
.uper
.upper
prior.lower.bound
prior.upper.bound
prior.upper.bound
    .posterior.fn <-        posterior.fn.creator.fn( log.results = FALSE, be.verbose = be.verbose, rel.tol = rel.tol, abs.tol = abs.tol, subdivisions = subdivisions, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, low.boundary = low.boundary, high.boundary = high.boundary, prior.over.biomarker.crossing.threshold.time = prior.over.biomarker.crossing.threshold.time )
.posterior.fn( 18000 )
.posterior.fn( 17090 )
.posterior.fn( 17090:18020 )
prior.over.last.biomarker.crossing.threshold.time( 18000 )
prior.over.last.biomarker.crossing.threshold.time( 17900:18100 )
prior.over.last.biomarker.crossing.threshold.time( 17990:18020 )
prior.over.last.biomarker.crossing.threshold.time( 17980:18020 )
prior.over.last.biomarker.crossing.threshold.time( 17980:18010 )
prior.over.last.biomarker.crossing.threshold.time( 17980:18005 )
prior.over.last.biomarker.crossing.threshold.time( 17990:18005 )
prior.over.last.biomarker.crossing.threshold.time( 17980:18005 )
ihist
is.uniform.over.range( prior.over.last.biomarker.crossing.threshold.time, 18000.5, 18001.5 )
prior.over.last.biomarker.crossing.threshold.time( seq( 18000.5, 18001.5, by = 0.01 ) )
plot( prior.over.last.biomarker.crossing.threshold.time( seq( 18000.5, 18001.5, by = 0.01 ) ) )
    low.boundary
the.biomarker.dynamics
the.biomarker
low.boundary
remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "adjusted.date" ]
remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]]
ihist
prior.over.last.biomarker.crossing.threshold.time
prior.over.last.biomarker.crossing.threshold.time <- NULL
remaining.biomarker.bounds.to.process.last.to.first = remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one
posterior.for.preceding.event
posterior.for.preceding.event( 18000 )
prior.over.last.biomarker.crossing.threshold.time = posterior.for.preceding.event
prior.lower.bound
prior.up
prior.upper.bound
low.boundary
the.biomarker
remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one
ihist.biomarker.classes
ihist.most.informative.by.biomarker
ihist
plot( prior.over.last.biomarker.crossing.threshold.time( seq( 18005.5, 18006.5, by = 0.01 ) ) )
is.uniform.over.range( prior.over.last.biomarker.crossing.threshold.time, 18006.5, 18007.5 )
density.fn <- prior.over.last.biomarker.crossing.threshold.time; lower <- 18006.5; upper <- 18007.5;
    density.fn.result.lower
    density.fn.result.upper
    density.fn.result.upper
density.fn.result.upper
density.fn.result.upper
( !( ( density.fn.result.lower > 0 ) && ( density.fn.result.upper > 0 ) ) )
ensure.finite.and.nonzero( prior.over.last.biomarker.crossing.threshold.time, 18006 )
ensure.finite.and.nonzero( 18006, prior.over.last.biomarker.crossing.threshold.time )
function( x ) { stop( paste( "x ==", x ) ) }( 234 )
function( x ) { stop( paste( "x ==", x ) ) }
function( x ) { stop( paste( "x ==", x ) ) }( 234 )
.fn <- function( x ) { stop( paste( "x ==", x ) ) }
.fn( 234 )
ensure.finite.and.nonzero( 18006, prior.over.last.biomarker.crossing.threshold.time )
ensure.finite.and.nonzero( 18006, prior.over.last.biomarker.crossing.threshold.time )
ensure.finite.and.nonzero.from.above( 17000 )
ensure.finite.and.nonzero.from.below( 17000, prior.over.last.biomarker.crossing.threshold.time )
ensure.finite.and.nonzero.from.above( 17000, prior.over.last.biomarker.crossing.threshold.time )
ensure.finite.and.nonzero.from.above( 17000, prior.over.last.biomarker.crossing.threshold.time, .stop.fn = function( x ) { x + 1 } )
ensure.finite.and.nonzero.from.above( 17000, prior.over.last.biomarker.crossing.threshold.time, .stop.fn = function( x ) { -Inf } )
is.uniform.over.range( prior.over.last.biomarker.crossing.threshold.time, 18006.5, 18007.5 )
q()
n
names(agg_interpreter.new.in.list.with.inputs)
agg_interpreter.new.in.list.with.inputs
aggregate_interpreter_constructor_fn.new
agg_interpreter.new.in.list.with.inputs
agg_interpreter.new.in.list.with.inputs
names( agg_interpreter.new.in.list.with.inputs )
prior.over.rna.threshold.crossing.time
lb_med_ub.prior
the_plot.prior
ihist
agg_interpreter.new.in.list.with.inputs
agg_interpreter.new.in.list.with.inputs[[ "remaining.biomarker.bounds.to.process.last.to.first" ]][[ "RNA" ]]$test
ihist.RNA.tests
ihist$test %in% ihist.RNA.tests
!( ihist$test %in% ihist.RNA.tests )
ihist.prior
the_plot.prior
all_assay_dynamics[ unique( ihist.prior$test ) ]
all_assay_dynamics[ unique( ihist.prior$test ) ]$class
all_assay_dynamics[ unique( ihist.prior$test ) ][[ "class" ]]
all_assay_dynamics[ unique( ihist.prior$test ) ]
sapply( all_assay_dynamics[ unique( ihist.prior$test ) ], function( assay.dynamics ) { assay.dynamics$class } )
all_assay_dynamics[ ihist.prior[ i, "test" ] ]$class
all_assay_dynamics[ ihist.prior[ 1, "test" ] ]$class
ihist.prior[ 1, "test" ]
all_assay_dynamics[[ ihist.prior[ 1, "test" ] ]]$class
assay_interpreters.prior
assay_interpreters.prior[[1]]
assay_interpreters.prior[[2]]( as.numeric( as.Date( "2019-04-01" ) ) )
dev.off()
the_plot.prior
ihist
ihist.prior.biomarker.classes
ihist.prior.with.biomarker
ihist.prior.with.biomarker
ihist.prior.assay.delay
biomarker_dynamics
assay_interpreters.prior
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-15')) )
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-05')) )
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-05')) )
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-05')) )
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-15')) )
the_plot.prior
dev.off()
the_plot.prior
the_plot.prior
dev.off()
the_plot.prior
the_plot.prior <- NULL
assay_interpreters.prior
assay_interpreters.prior[[2]]( 18000 )
the_plot.prior
construct_assay_result_interpreter
ihist.prior.with.biomarker$adjusted.date
the_plot
the_plot.prior
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-05')) )
assay_interpreters.prior[[2]]( as.numeric(as.Date('2019-04-15')) )
    the.cdf.fn <- get.dynamics.cumulative.distribution.function( the.biomarker.dynamics, additional.location.shift = additional.location.shift, log.results = log.results )
the.biomarker.dynamics <- biomarker_dynamics[[2]]
the.biomarker.dynamics

    the.cdf.fn <- get.dynamics.cumulative.distribution.function( the.biomarker.dynamics, additional.location.shift = additional.location.shift, log.results = log.results )


    the.cdf.fn <- get.dynamics.cumulative.distribution.function( the.biomarker.dynamics, additional.location.shift = 0, log.results = log.results )
the.cdf.fn(  as.numeric(as.Date('2019-04-15')) )
the.cdf.fn(  as.numeric(as.Date('2019-04-15')), log.results = FALSE )

    the.cdf.fn <- get.dynamics.cumulative.distribution.function( the.biomarker.dynamics, additional.location.shift = 0, log.results = FALSE )
the.cdf.fn(  as.numeric(as.Date('2019-04-15')) )
the.cdf.fn(  as.numeric(as.Date('2019-04-05')) )
the.cdf.fn(  0 )
the.cdf.fn(  10 )
the.cdf.fn(  3 )
construct_assay_result_interpreter(assay_dynamics = the.biomarker.dynamics,                                          result = ihist.prior[2, 'result'],                                           sample_date = ihist.prior.with.biomarker[2, 'adjusted_date'])
ihist.prior.with.biomarker[2, 'adjusted_date']
ihist.prior.with.biomarker
ihist.prior.with.biomarker[2, 'adjusted_date']
ihist.prior.with.biomarker[, 'adjusted_date']
ihist.prior.with.biomarker[, 'adjusted.date']
the_plot
the_plot.prior
the_plot.prior
substr( as.character(as.Date(floor(x_breaks), origin = '1970-01-01')), 6 )
substr( as.character(as.Date(floor(18000), origin = '1970-01-01')), 6 )
substr( as.character(as.Date(floor(18000), origin = '1970-01-01')), 6, 11 )
help( "Date" )
format(today, "%d %b %Y")
format(as.Date( 18000 ), "%d %b %Y")
format(as.Date( 18000, origin = "1970-0101" ), "%d %b %Y")
format(as.Date( 18000, origin = "1970-01-01" ), "%d %b %Y")
format(as.Date( 18000, origin = "1970-01-01" ), "%d %M %Y")
format(as.Date( 18000, origin = "1970-01-01" ), "%d %m %Y")
format(as.Date( 18000, origin = "1970-01-01" ), "%d %B %Y")
format(as.Date( 18000, origin = "1970-01-01" ), "%d %b")
format(as.Date( 18000, origin = "1970-01-01" ), "%b %d")
format(as.Date( 18000, origin = "1970-01-01" ), "%B %d")
format(as.Date(floor(x_breaks), origin = '1970-01-01'), "%B %d")
the_plot.prio
the_plot.prior
gsub( " ", "\\n", event.name )
event.name <- "initial infection"; gsub( " ", "\\n", event.name )
event.name <- "initial infection"; gsub( " ", "\\\\n", event.name )
the_plot.prior
gsub( " ", "\\\\\\\\n", event_name )
event_name <- "initial infection"; gsub( " ", "\\\\\\\\n", event_name )
the_plot.prior
the_plot.prior + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
the_plot.prior
o
gsub( " ", "\\\n", event_name )
the_plot.prior
the_plot.prior
the_plot.prior
the_plot.prior
lb_med_ub.old
the_plot.old
the_plot.old
the_plot.old
the_plot.old
q()
n
dev.new(); the_plot.old()
dev.new(); the_plot.old
as.Date( 17987.00 )
as.Date( 17987, origin = "1970-01-01"  )
ihist
ihist$sample_date[ 3 ]
( ihist$sample_date[ 2 ] - ihist$sample_date[ 3 ] )
days.to.shift.by.to.align.times.across.tests
ihist$sample_date[ 1:2 ] + days.to.shift.by.to.align.times.across.tests
ihist$sample_date[ 1:2 ] - days.to.shift.by.to.align.times.across.tests
ihist
agg_interpreter.new(18020)
ihist
ihist
ihist
agg_interpreter.new.in.list.with.inputs <- aggregate_interpreter_constructor_fn.new(ihist )
prior.lower.bound = -Inf, prior.upper.bound = Inf, lower.bound.offset.from.first.positive = -100, minimum.bound.width = 150, be.verbose = FALSE
prior.lower.bound = -Inf; prior.upper.bound = Inf; lower.bound.offset.from.first.positive = -100; minimum.bound.width = 150; be.verbose = FALSE
    ihist.most.informative.by.biomarker
    ihist.most.informative.by.biomarker
remaining.biomarker.bounds.to.process.last.to.first = ihist.most.informative.by.biomarker; prior.over.last.biomarker.crossing.threshold.time = NULL; prior.lower.bound = prior.lower.bound; prior.upper.bound = prior.upper.bound; be.verbose = be.verbose
return.list.with.inputs = FALSE
sample.name
sample.name <- ""
prior.over.last.biomarker.crossing.threshold.time
low.boundary
remaining.biomarker.bounds.to.process.last.to.first
( length( remaining.biomarker.bounds.to.process.last.to.first ) == 1 )
    posterior.for.preceding.event <-
        create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = the.biomarker, prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ) )
    posterior.for.preceding.event <-        create.biomarker.normalized.posterior.density( low.boundary = low.boundary, high.boundary = high.boundary, posterior.maximum = NULL, biomarker.dynamics.class = the.biomarker, prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time, sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] ) )
    posterior.for.preceding.event( 18000 )
    remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one
remaining.biomarker.bounds.to.process.last.to.first = remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one, prior.lower.bound = prior.lower.bound, prior.upper.bound = prior.upper.bound, prior.over.last.biomarker.crossing.threshold.time = posterior.for.preceding.event
remaining.biomarker.bounds.to.process.last.to.first = remaining.biomarker.bounds.to.process.last.to.first.excluding.this.one; prior.lower.bound = prior.lower.bound; prior.upper.bound = prior.upper.bound; prior.over.last.biomarker.crossing.threshold.time = posterior.for.preceding.event
the.biomarker
( is.null( prior.over.last.biomarker.crossing.threshold.time ) )
prior.over.last.biomarker.crossing.threshold.time
prior.over.last.biomarker.crossing.threshold.time.is.uniform
low.boundary
high.boundary
( is.null( prior.over.last.biomarker.crossing.threshold.time ) )
        prior.over.last.biomarker.crossing.threshold.time.is.uniform
( length( remaining.biomarker.bounds.to.process.last.to.first ) == 1 )
)
low.boundary
high.boundary
prior.lower.bound
prior.upper.bound
posterior.maximum = NULL; biomarker.dynamics.class = "RNA"; prior.over.biomarker.crossing.threshold.time = prior.over.last.biomarker.crossing.threshold.time; prior.lower.bound = prior.lower.bound; prior.upper.bound = prior.upper.bound; sample.name = paste( the.biomarker, remaining.biomarker.bounds.to.process.last.to.first[[ the.biomarker ]][ 1, "ptid" ] )
the.biomarker.dynamics = biomarker_dynamics[[ biomarker.dynamics.class ]]; abs.tol = 0.0001; rel.tol = 0.0001; subdivisions = 100L
)
        normalized.posterior.density.of.infection.causing.exposure.time( 18000 )
        normalized.posterior.density.of.infection.causing.exposure.time( 18000 )
agg_interpreter.new( 18000 )
agg_interpreter.new( 17080 )
agg_interpreter.new( 17020 )
agg_interpreter.new( 17040 )
agg_interpreter.new( 17840 )
agg_interpreter.new( 17940 )
agg_interpreter.new( 17920 )
agg_interpreter.new
agg_interpreter.new( 18000 )
agg_interpreter.new( 17920 )
prior.over.rna.threshold.crossing.time
  lb_med_ub.prior
prior.over.rna.threshold.crossing.time
    prior.over.last.biomarker.crossing.threshold.time( 100 )
ihist.prior
ihist.prior.with.biomarker$biomarker
all_assay_dynamics[[ ihist.prior[ i, "test" ] ]]
lb_med_ub.prior
as.list( lb_med_ub.prior )
lb_med_ub.prior
the_plot.prior
lb_med_ub.prior
ihist.prior
agg_interpreter.prior
prior.over.rna.threshold.crossing.time
prior.over.rna.threshold.crossing.time
prior.over.rna.threshold.crossing.time
prior.over.biomarker.crossing.threshold.time <- function( time ) { 1 }
    prior.over.rna.crossing.threshold.time
    prior.over.rna.crossing.threshold.time( 1 )
the_plot.prior
lb_med_ub.prior
as.numeric(as.Date('2019-05-01'))
vlines.dat
vlines_dat
the_plot.prior
    ihist$sample_date[ 1:2 ]
    ihist$sample_date
ihist
ihist
lb.med.ub.old <- estimate_lb_med_ub_fn.new( fun = agg_interpreter.old,                                range_start = range_start,                                range_end = range_end,                                   verbose = FALSE)
lb.med.ub.old
cbind( lb.med.ub.old, lb_med_ub.old )
lb_med_ub.old <- estimate_lb_med_ub_fn.old(fun = agg_interpreter.old,                                range_start = range_start,                                range_end = range_end,                                   verbose = FALSE)
lb.med.ub.old[["max_agg"]] <- NULL
cbind( lb.med.ub.old, lb_med_ub.old )
cbind( lb.med.ub.old, lb_med_ub.old, lb_med_ub.new )
ihist
prior.over.rna.threshold.crossing.time
ihist
ihist
ihist
agg_interpreter.new( 18000 )
agg_interpreter.new( 17920 )
agg_interpreter.new( 17940 )
agg_interpreter.old( 17940 )
ihist
ihist
ihist
agg_interpreter.new( 18000 )
output.filename.base
results.table
cbind( "CDFs" = lb_med_ub.old, "IntegratedPDFs" = lb_med_ub.new )
results.table
results.table
mode( results.table)
class( results.table)
class( results.table[1,1])
( results.table[1,1])
ode
mode( results.table[1,1])
as.numeric( lb_med_ub.old )
( lb_med_ub.old )
as.numeric( unlist( lb_med_ub.old ) )
cbind( "CDFs" = as.numeric( unlist( lb_med_ub.old ) ), "IntegratedPDFs" = as.numeric( unlist( lb_med_ub.new ) ) )
rownames( results.table )
results.table
mode( results.table)
class( results.table)
mode( results.table[[1])
mode( results.table[[1]])
round( results.table )
as.numeric( results.table )
matrix( results.table )
round( results.table )
apply( results.table, 1:2, print )
unlist( lb_med_ub.old )
results.table
mode( results.table)
class( results.table)
unlist( lb_med_ub.prior )[ 1:3 ]
unlist( lb_med_ub.prior )[ 1 ]
results.table
paste( output.filename.base, ".csv", sep = "" )
apply( results.table, 1:2, sprintf( "%0.2f" ) )
apply( results.table, 1:2, function( x ) { sprintf( "%0.2f", x ) ) )
apply( results.table, 1:2, function( x ) { sprintf( "%0.2f", x ) } ) )
apply( results.table, 1:2, function( x ) { sprintf( "%0.2f", x ) } )
q()
n
source( "tsic-getting-started-paul.R" )
search()
source( "tsic-getting-started-paul.R" )
source( "tsic-getting-started-paul.R" )
source( "tsic-getting-started-paul.R" )
as.Date( 17998, origin = "1970-01-01" )
ihist
ihist.Abonly.oneday21
as.Date( 18022, origin = "1970-01-01" )
source( "tsic-getting-started-paul.R" )
source( "tsic-getting-started-paul.R" )
search()
source( "tsic-getting-started-paul.R" )
search()
source( "tsic-getting-started-paul.R" )
source( "tsic-getting-started-paul.R" )
q()
n
